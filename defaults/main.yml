---
config_folder: '/etc/opster/searchgateway'

# Docker Defaults
docker_name: 'search_gateway'
docker_image: 'public.ecr.aws/opsterio/sgw'
docker_build: 'latest'
docker_pull: True
docker_ulimits:
  - "memlock:-1:-1"
docker_recreate: True
docker_state: 'started'
docker_restart_policy: "unless-stopped"
docker_published_ports:
  - "0.0.0.0:9200:9200"
  - "0.0.0.0:5555:5555"
docker_env:
  APP_VERSION: "{{ docker_build }}"
docker_network_mode: "bridge"
docker_cpu_period: 0
docker_cpu_quota: 0
docker_memory: 0
docker_log_driver: "json-file"
docker_log_options: "{}"
docker_labels:
  version: "{{ docker_build }}"

# Application Defaults
opster_sgw_version: 'latest'
opster_sgw_port: 9200

opster_sgw_logger_url:
  protocol: "http"
  host: "localhost"
  port: 9201

opster_sgw_logger:
  index: "opster-sg"
  batch_size: 10
  doc_type: "doc"
  batch_timeout: 5000
  retry: 3
  auth:
    # username: 'elastic'
    # password: 'elastic'

opster_sgw_health_checker:
  enable: "false"
  threadPool: 1
  periodInMilliSeconds: 1000

opster_sgw_route:
  userParameter: "X-User-Id"
  analyzeQuery: "false"
  searchConfigInElastic: "false"
  useOpaque: "false"
  logBody: "false"
  logPreSend: "false"
  sniffNodeIntervalInSeconds: 0

# opster_sgw_sslserverloader:
#   type: 'files'
#   certFileName: '/app/resources/certs/cert.pem'
#   privateKeyFileName: '/app/resources/certs/cert.key'

opster_sgw_cacheconfiguration:
  expensiveQueriesCacheSize: 1
  slowQueriesCacheSize: 1
  # cacheFetchFromTimeInHours: 
  cacheBulkFetchSize: 0
  maxFetching: 0

opster_sgw_searchgateway:
  heavySearchCostThreshold: 1000
  slowSearchTimeInMilliThreshold: 1000
  features:
    regex:
      cost: 100
      factors:
        HEAVY: 3
        MEDIUM: 2
        LIGHT: 1
      classifier:
        type: string
        config:
          contains:
            cost: 10
            values:
              - "*"
              - .*
          startsWith:
            cost: 100
            values:
              - .*
              - "*"
          pattern:
            cost: 100
            values:
              - :\s?\*[^\s"]
        thresholds:
          HEAVY:
            gte: 100
          MEDIUM:
            gt: 10
            lt: 100
          LIGHT:
            lte: 10
    data:
      cost: 1
      factors:
        HEAVY: 3
        MEDIUM: 2
        LIGHT: 1
      classifier:
        type: math
        config:
          expression: "{{ '{{' }}size{{ '}}' }}"
        thresholds:
          HEAVY:
            gt: 1000
          MEDIUM:
            gt: 100
            lte: 1000
          LIGHT:
            lte: 100
    range:
      cost: 1
      factors:
        HEAVY: 1001
        MEDIUM: 500
        LIGHT: 1
      classifier:
        type: math
        config:
          expression: "{{ '{{' }}duration{{ '}}' }}"
        thresholds:
          HEAVY:
            gte: 86400000
          MEDIUM:
            gt: 21600000
            lt: 86400000
          LIGHT:
            lte: 21600000
    aggregation:
      cost: 100
      factors:
        HEAVY: 3
        MEDIUM: 2
        LIGHT: 1
      classifier:
        type: math
        config:
          expression: ({{ '{{' }}level{{ '}}' }} * {{ '{{' }}size{{ '}}' }}) * (1 * (1 + {{ '{{' }}hasScripts{{ '}}' }}))
        thresholds:
          HEAVY:
            gt: 100000
          MEDIUM:
            gt: 1000
            lte: 100000
          LIGHT:
            lte: 1000
    script:
      cost: 100
      factors:
        HEAVY: 3
      classifier:
        type: math
        config:
          expression: "{{ '{{' }}hasScript{{ '}}' }}"
        thresholds:
          HEAVY:
            gte: 1
