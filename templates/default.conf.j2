{
  opster.mclb: {
    port: "{{ opster_sgw_port }}",

    healthChecker:{
      threadPool: "{{ opster_sgw_health_checker.threadPool }}",
      periodInMilliSeconds: "{{ opster_sgw_health_checker.periodInMilliSeconds }}",
      enable: "{{ opster_sgw_health_checker.enable }}"
    },

    route: {
      userParameter: "{{ opster_sgw_route.userParameter }}",
      analyzeQuery:  "{{ opster_sgw_route.analyzeQuery }}",
      searchConfigInElastic: "{{ opster_sgw_route.searchConfigInElastic }}",
      useOpaque: "{{ opster_sgw_route.useOpaque }}",
      logBody: "{{ opster_sgw_route.logBody }}",
      logPreSend: "{{ opster_sgw_route.logPreSend }}",
      sniffNodeIntervalInSeconds: "{{ opster_sgw_route.sniffNodeIntervalInSeconds }}"
    },

{% if opster_sgw_sslserverloader is defined %}
    sslServerLoader:{
      type: "{{ opster_sgw_sslserverloader.type }}",
{% if opster_sgw_sslserverloader.type == 'files' %}
      certFileName: "{{ opster_sgw_sslserverloader.certFileName }}",
      privateKeyFileName: "{{ opster_sgw_sslserverloader.privateKeyFileName }}"
{% elif opster_sgw_sslserverloader.type == 'key_store' %}
      keyStoreType: "{{ opster_sgw_sslserverloader.keyStoreType }}",
      keyStorePassword: "{{ opster_sgw_sslserverloader.keyStorePassword }}",
      keyStoreFile: "{{ opster_sgw_sslserverloader.keyStoreFile }}",   
{% endif %}
    },
{% endif %}

    cacheConfiguration:{
      expensiveQueriesCacheSize:"{{ opster_sgw_cacheconfiguration.expensiveQueriesCacheSize }}",
      slowQueriesCacheSize: "{{ opster_sgw_cacheconfiguration.slowQueriesCacheSize }}",
      cacheBulkFetchSize: "{{ opster_sgw_cacheconfiguration.cacheBulkFetchSize }}",
      cacheFetchFromTimeInHours:"{{ opster_sgw_cacheconfiguration.cacheFetchFromTimeInHours }}",
      dumpCacheIntervalInHours:"{{ opster_sgw_cacheconfiguration.cacheFetchFromTimeInHours }}",
      loadFromCache:true,
      index: "{{ opster_sgw_cacheconfiguration.cacheIndex }}"
    }

    backends:[
{% for backend in opster_sgw_backends %}
      {
      id: "{{ loop.index }}", #index param should start from 1 and then 1 will be default
      url: "{{ backend.url }}",
{% if backend.username is defined and backend.username is defined %}
      authInfo: {
        type: "BASIC"
        credentials: { 
          user: "{{ backend.username }}"
          password: "{{ backend.password }}"
        }
      },
{% endif %}
{% if backend.sniff is defined %}
      sniff: {
          enabled: "true",
          allowNodeRoles: "{{ backend.sniff.allowNodeRoles | default(omit)}}",
          allowNodeNames: "{{ backend.sniff.allowNodeNames | default(omit)}}"
          allowNodeIPs: "{{ backend.sniff.allowNodeIPs | default(omit)}}",
          useDefaultElasticPort: "{{ backend.sniff.useDefaultElasticPort}}"
        },
{% endif %}
      },
{% endfor %}
    ],

    "errorHandling": {
      "enabled': true
      "kafka": {
        "bootstrapServers": "kafka:9092",
        "groupId": "mclb",
        "topic": "mclb-"
      }
    },


    tenants: {
      {% for tenant in opster_sgw_tenants %}
      "{{tenant.name}}": {
        patterns: ["{{tenant.regexPattern}}"],
        leader:"{{tenant.leader}}"
        {% if tenant.follower is defined %}
        follower:"{{tenant.follower}}"
        {% endif %}
      }
      {% endfor %}
    }



  "searchGateway": {
    "heavySearchCostThreshold": "{{ opster_sgw_searchgateway.heavySearchCostThreshold }}",
    "slowSearchTimeInMilliThreshold": "{{ opster_sgw_searchgateway.slowSearchTimeInMilliThreshold }}",
    "features": {{ opster_sgw_searchgateway.features | to_nice_json(indent=2) }}
  }
  }
}
